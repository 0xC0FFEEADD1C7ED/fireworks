/*
  DONE:
  - output test log to file
  - open a blank document before we start
    - newdoc = fw.createFireworksDocument(size, res, backgroundColor);

  TODO:
  - use test files for heavyweight stuff (400 elements resize, 6000x6000 canvas...)
    - fw.openDocument(fileURL string or array);
  - test all commands

*/

var test_document = fw.createFireworksDocument({x:400,y:400}, {pixelsPerUnit:72, units:"inch"}, '#ffffff00');

try {
  fw.runScript(fw.currentScriptDir + '/bstest.js');
} catch(e) {
  alert(e);
}


// Start test
log('Running TestSuite in ' + fw.appName);

start_time = new Date();


// Test that tests are working (talk about trust...)
test('bs is loaded', function(){
  assert_equal('dom() is defined',typeof(dom),"function");
});

test('Test Suite runs setup', function(){
  assert_equal( 'There is one item created and selected', fw.selection.length, 1);
});
assert_equal('Test Suite runs teardown', fw.selection.length,0);


// API
test('Array extensions are defined', function(){
  assert_equal( 'Array.clone is defined', typeof(fw.selection.clone), "function" );
  assert_equal( 'Array.each is defined', typeof(a.each), "function" );
  assert_equal( 'Array.each_with_index is defined', typeof(a.each_with_index), "function" );
  assert_equal( 'Array.is_group is defined', typeof(a.is_group), "function" );
  assert_equal( 'Number.times is defined', typeof((5).times), "function" );
  assert_equal( 'Array.each_in_group is defined', typeof(fw.selection[0].each_in_group), 'function');
});
test('Array extensions work', function(){
  count = 0;
  a.each(function(p){
    count++;
  });
  assert_equal( 'Array.each works', count, a.length );
  count = 0;
  a.each_with_index(function(p,index){
    count += index;
  });
  assert_equal( 'Array.each_with_index works', count, 9+8+7+6+5+4+3+2+1 );
  b = a.clone();
  assert_equal('Array.clone works',b[4],4);
});


// Align: DONE
test( 'Align commands: Center', function(){

  dom().selectAll();
  fw.selection[0].left = 100 * Math.random();
  fw.selection[0].top = 100 * Math.random();
  run_command('Align', 'Center on Canvas - Horizontal');
  assert_equal('Object is centered horizontally', fw.selection[0].left, 150);

  dom().selectAll();
  fw.selection[0].left = 100 * Math.random();
  fw.selection[0].top = 100 * Math.random();
  run_command('Align', 'Center on Canvas - Vertical');
  assert_equal('Object is centered vertically', fw.selection[0].top, 150);

  dom().selectAll();
  fw.selection[0].left = 100 * Math.random();
  fw.selection[0].top = 100 * Math.random();
  run_command('Align', 'Center on Canvas - Both');
  assert_equal('Object is centered horizontally', fw.selection[0].left, 150);
  assert_equal('Object is centered vertically', fw.selection[0].top, 150);

  dom().addNewText({left:0, top:0, right:100, bottom:20}, true);
  dom().setTextRuns({ initialAttrs:{ alignment:"center", antiAliasSharpness:192, antiAliasStrength:64, baselineShift:0, bold:false, face:"Arial", fillColor:"#666666", horizontalScale:1, italic:false, leading:1, leadingMode:"percentage", overSample:8, paragraphIndent:0, paragraphSpacingAfter:0, paragraphSpacingBefore:0, rangeKerning:0, size:"10pt", underline:false }, textRuns:[ { changedAttrs:{  }, characters:"fafdsfadsfasdfads" } ] });
  run_command('Select','Text Objects');
  run_command('Align', 'Center on Canvas - Horizontal');
  assert_equal('Text box is centered horizontally', Selection.left(), Math.round(dom().width/2 - Selection.width()/2));
  run_command('Align', 'Center on Canvas - Vertical');
  assert_equal('Text box is centered vertically', Selection.top(), Math.round(dom().height/2 - Selection.height()/2));
  fw.selection[0].left = 100 * Math.random();
  fw.selection[0].top = 100 * Math.random();
  run_command('Align', 'Center on Canvas - Both');
  assert('Text box is centered in both directions', (Selection.left() == Math.round(dom().width/2 - Selection.width()/2)) && (Selection.top() == Math.round(dom().height/2 - Selection.height()/2)));

});

test( 'Align commands: Space', function(){
  (3).times(add_rectangle);
  prompt_return = 10;
  dom().selectAll();
  run_command('Align','Space Horizontal');
  assert_equal('Elements are spaced horizontally',Selection.width(),430);
  dom().selectAll();
  run_command('Align','Space Vertical');
  assert_equal('Elements are spaced vertically',Selection.height(),430);
});


// Alpha: DONE
test( 'Alpha commands', function(){
  [10,20,30,40,50,60,70,80,90,100].each(function(alpha){
    run_command("Alpha","Alpha "+alpha);
    // This is a *very* bad test, but that's just because Fireworks does some funky stuff with opacity...
    assert_equal( 'Alpha ' + alpha + ' works', Math.round(fw.selection[0].opacity),alpha);
  });
});


// Canvas: DONE
test( 'Canvas', function(){
  prompt_return = 110;
  run_command("Canvas","Canvas Width");
  assert_equal('Canvas Width is 110', dom().width, 110);
  run_command("Canvas","Canvas Height");
  assert_equal('Canvas Height is 110', dom().height, 110);
  prompt_return = '100,100';
  run_command("Canvas","Canvas Size");
  assert_equal('Canvas Size sets Width', dom().width, 100);
  assert_equal('Canvas Size sets Height', dom().height, 100);
});


// Color
test('Color',function(){
  prompt_return = '#00ff00';
  run_command('Color','Canvas Color');
  assert_equal('Canvas Color sets color', dom().backgroundColor,'#00ff00');
  run_command('Color','Fill Color');
  assert_equal('Fill Color sets Color', fw.selection[0].pathAttributes.fillColor,'#00ff00');
  run_command('Color','Stroke Color');
  assert_equal('Fill Color sets Stroke', fw.selection[0].pathAttributes.brushColor,'#00ff00');
  dom().selectAll();
  dom().group("normal");
  run_command('Color','Fill Color');
  Selection.each(function(e){
    assert_equal('Fill Color sets color of elements inside groups', e.pathAttributes.fillColor, '#00ff00');
  });
});


// Effects
// No idea how I should test these, so I just basically run them all and expect Fireworks not to explode
test('Effects: Graphic',function(){
  run_command('Effects','Lightbox');
  run_command('Effects','Plastic');
  prompt_return = 50;
  run_command('Effects','Reflection');
  run_command('Effects','Safe Flatten');
});
// Repeat commands can be tested properly
test('Effects: Repeat Horizontal', function(){
  prompt_return = 10;
  run_command('Effects', 'Repeat Horizontal');
  dom().selectAll();
  assert_equal('Item is repeated 10 times', fw.selection.length, 11);
  assert_equal('Item is spaced properly', Selection.width(), ((11 * 100) + (10 * 10)));
});
test('Effects: Repeat Vertical', function(){
  prompt_return = 10;
  run_command('Effects', 'Repeat Vertical');
  dom().selectAll();
  assert_equal('Item is repeated 10 times', fw.selection.length, 11);
  assert_equal('Item is spaced properly', Selection.height(), ((11 * 100) + (10 * 10)));
});


// Export
// These are tricky to test, so the test does nothing right now...
test('Export',function(){
  // create document
  // add pages
  // run export command
  // check if files are created, using Files.enumFiles(docOrDir) of Files.exists(docOrDir)
});

// Export Settings
test('Export Settings',function(){
  // TODO: check all pages in multipage document
  run_command('Export Settings','Set PNG 24 for All Pages');
  assert_equal('PNG is set as export setting for all pages', dom().exportOptions.exportFormat, 'PNG');
});

// Grids


// Guides


// Pages


// Position: DONE
test('Position',function(){
  fw.selection[0].left = 100.2;
  fw.selection[0].top = 100.2;
  run_command('Position','Fix Position');
  assert_equal('Element x position is rounded', fw.selection[0].left, 100);
  assert_equal('Element y position is rounded', fw.selection[0].top, 100);

  prompt_return = '100,100';
  run_command('Position','Set Position');
  assert_equal('Element is moved to x position', fw.selection[0].left, 100);
  assert_equal('Element is moved to y position', fw.selection[0].top, 100);
});


// Properties: DONE
test('Properties',function(){
  prompt_return = 10;
  run_command('Properties','Set Rectangle Roundness in Pixels');
  var sel = fw.selection[0];
  var border_radius = 0;
  if (sel.roundness) {
    if(sel.mode == 'exact') {
      border_radius = sel.roundness;
    } else {
      border_radius = (sel.roundness * sel.height) / 2;
    }
  };
  assert_equal('Rectangle roundness is set properly', border_radius, 10);
});


// Select
test( 'Select text objects', function(){
  dom().addNewText({left:0, top:0, right:100, bottom:20}, true);
  dom().setTextRuns({ initialAttrs:{ alignment:"center", antiAliasSharpness:192, antiAliasStrength:64, baselineShift:0, bold:false, face:"Arial", fillColor:"#666666", horizontalScale:1, italic:false, leading:1, leadingMode:"percentage", overSample:8, paragraphIndent:0, paragraphSpacingAfter:0, paragraphSpacingBefore:0, rangeKerning:0, size:"10pt", underline:false }, textRuns:[ { changedAttrs:{  }, characters:"fafdsfadsfasdfads" } ] });
  dom().addNewText({left:0, top:20, right:100, bottom:20}, true);
  dom().setTextRuns({ initialAttrs:{ alignment:"center", antiAliasSharpness:192, antiAliasStrength:64, baselineShift:0, bold:false, face:"Arial", fillColor:"#666666", horizontalScale:1, italic:false, leading:1, leadingMode:"percentage", overSample:8, paragraphIndent:0, paragraphSpacingAfter:0, paragraphSpacingBefore:0, rangeKerning:0, size:"10pt", underline:false }, textRuns:[ { changedAttrs:{  }, characters:"fafdsfadsfasdfads" } ] });

  run_command('Select','Text Objects');
  assert_equal('Two text boxes are selected', fw.selection.length, 2);
});

// Size
test( 'Size command, single object', function(){
  assert_equal('An item is selected and its width is 100', fw.selection[0].width, 100);
  run_command("Size","Width +1");
  assert_equal('Selected item is 1 pixel wider', fw.selection[0].width, 101);
  run_command("Size","Width +10");
  assert_equal('Selected item is 10 pixels wider', fw.selection[0].width, 111);
  run_command("Size","Height +1");
  assert_equal('Selected item is 1 pixel taller', fw.selection[0].height, 101);
  run_command("Size","Height +10");
  assert_equal('Selected item is 10 pixels taller', fw.selection[0].height, 111);
  run_command("Size","Width -1");
  assert_equal('Selected item is 1 pixel narrower', fw.selection[0].width, 110);
  run_command("Size","Width -10");
  assert_equal('Selected item is 10 pixels narrower', fw.selection[0].width, 100);
  run_command("Size","Height -1");
  assert_equal('Selected item is 1 pixel shorter', fw.selection[0].height, 110);
  run_command("Size","Height -10");
  assert_equal('Selected item is 10 pixels shorter', fw.selection[0].height, 100);
});

test( 'Size command, multiple objects', function(){
  assert_equal('One item is selected', fw.selection.length,1);
  (30).times(add_rectangle);
  dom().selectAll();
  assert_equal('Multiple items are selected', fw.selection.length, 31);
  run_command("Size","Width +10");
  assert_equal('Multiple items are 10 pixels wider', Selection.get_bounds().right,110);
  run_command("Size","Height +10");
  assert_equal('Multiple items are 10 pixels taller', Selection.get_bounds().bottom,110);
});

xtest( 'Size command, multiple objects [STRESS TEST]', function(){
  var max_rects = 599; // 599 work (9205ms), 600 rectangles crash CS5
  assert_equal('One item is selected', fw.selection.length,1);
  (max_rects - 1).times(add_rectangle);
  dom().selectAll();
  assert_equal('Multiple items are selected', fw.selection.length, max_rects);
  run_command("Size","Width +10");
  assert_equal('Multiple items are 10 pixels wider', Selection.get_bounds().right,110);
  run_command("Size","Height +10");
  assert_equal('Multiple items are 10 pixels taller', Selection.get_bounds().bottom,110);
});

test( 'Size command, groups', function(){
  (30).times(add_rectangle);
  dom().selectAll();
  dom().group("normal");
  run_command('Size','Width +10');
  assert_equal('Group is resized',Selection.get_bounds().right,110);
});

test('Text boxes are resized properly', function(){
  // add text boxes
  dom().addNewText({left:0, top:0, right:100, bottom:20}, true);
  dom().setTextRuns({ initialAttrs:{ alignment:"center", antiAliasSharpness:192, antiAliasStrength:64, baselineShift:0, bold:false, face:"Arial", fillColor:"#666666", horizontalScale:1, italic:false, leading:1, leadingMode:"percentage", overSample:8, paragraphIndent:0, paragraphSpacingAfter:0, paragraphSpacingBefore:0, rangeKerning:0, size:"10pt", underline:false }, textRuns:[ { changedAttrs:{  }, characters:"fafdsfadsfasdfads" } ] });
  dom().addNewText({left:0, top:20, right:100, bottom:20}, true);
  dom().setTextRuns({ initialAttrs:{ alignment:"center", antiAliasSharpness:192, antiAliasStrength:64, baselineShift:0, bold:false, face:"Arial", fillColor:"#666666", horizontalScale:1, italic:false, leading:1, leadingMode:"percentage", overSample:8, paragraphIndent:0, paragraphSpacingAfter:0, paragraphSpacingBefore:0, rangeKerning:0, size:"10pt", underline:false }, textRuns:[ { changedAttrs:{  }, characters:"fafdsfadsfasdfads" } ] });

  run_command('Select','Text Objects');
  assert_equal('Two text boxes exist', fw.selection.length, 2);

  fw.selection.each_with_index(function(textbox,index){
    assert_equal('Text box ' + index + ' is 100 pixels wide', textbox.width, 104); // stupid Fireworks
  });

  // Resize ungrouped
  run_command('Select','Text Objects');
  run_command('Size', 'Width +10');
  fw.selection.each_with_index(function(textbox,index){
    assert_equal('Text box ' + index + ' is resized when not grouped', textbox.width, 114); // stupid Fireworks
  });

  // Create a group
  dom().selectAll();
  dom().group("normal");

  run_command('Select','Text Objects');
  run_command('Size', 'Width +10');
  fw.selection.each_with_index(function(textbox,index){
    assert_equal('Text box ' + index + ' is resized when grouped', textbox.width, 124); // stupid Fireworks
  });
});


// Text
test('Text commands', function(){
  
});


// Close test document
fw.closeDocument(test_document,false);

// End test
log('\n' + fw.appName + ": " + asserts + ' asserts, ' + ok + ' ok, ' + fail + ' failed. Test run in ' + (new Date() - start_time) + ' ms.');

File.create(test_output,'file:///P128/Users/ale/Desktop/test_output_' + fw.appName.replace(' ','_') + '.txt');
