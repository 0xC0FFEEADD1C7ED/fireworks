/*
  DONE:
  - output test log to file
  - open a blank document before we start
    - newdoc = fw.createFireworksDocument(size, res, backgroundColor);

  TODO:
  - use test files for heavyweight stuff (400 elements resize, 6000x6000 canvas...)
    - fw.openDocument(fileURL string or array);
  - test all commands

*/

// General setup
var asserts = 0;
var ok = 0;
var fail = 0;
var test_output = "";
function log(msg){
  alert(msg);
  test_output += msg + ' (' + new Date() + ')\n';
}
function add_rectangle(){
  fw.getDocumentDOM().addNewRectanglePrimitive({left:0, top:0, right:100, bottom:100}, 0);
}

// Test init
function assert(desc, thing, expected) {
  test_output += "- " + desc + ": ";
  asserts++;
  if (thing === expected) {
    ok++;
    test_output += "OK.\n";
  } else {
    fail++;
    test_output += 'FAIL. Got ' + thing + ' and expected ' + expected.toString() + '\n';
  }
}
function setup() {
  a = new Array(10);
  for (var i=0; i < a.length; i++) {
    a[i] = i;
  };
  add_rectangle();
  // redefine prompt() function so that we can specify the value(s) it returns.
  // This way, we can run tests on commands that ask the user for values.
  prompt = function(){
    if (prompt_return) {
      return prompt_return;
    } else {
      return 110;
    }
  };
  // redefine alert();
  // alert = log;
  // redefine fw.popupColorPickerOverMouse
  fw.popupColorPickerOverMouse = function(){
    return prompt_return;
  };
}
function teardown() {
  fw.getDocumentDOM().selectAll();
  fw.deleteSelection();
  delete(a);
}
function run_command(kind, command){
  try {
    f = fw.appJsCommandsDir + "/" + kind + "/" + encodeURIComponent(command) + ".jsf";
    fw.runScript(f);
  } catch (exception) {
    alert("Error running command " + kind + "/" + command + ".\n" + [exception, exception.lineNumber, exception.fileName].join("\n"));
  }
}
function test(what,f) {
  scenario = what;
  test_output += '\n' + what + '\n';
  setup();
  f.call();
  teardown();
}
function xtest(what,f){ };

// Start test
log('Running TestSuite in ' + fw.appName);
test_document = fw.createFireworksDocument({x:400,y:400}, {pixelsPerUnit:72, units:"inch"}, '#ffffff00');
try {
  fw.runScript(fw.appJsCommandsDir + "/bs.js");
} catch(e){
  alert("This command requires the bs.js library\rGet it at http://github.com/bomberstudios/fireworks/");
};

start_time = new Date();

// Test that tests are working (talk about trust...)
test('bs is loaded', function(){
  assert('dom() is defined',typeof(dom),"function");
});
test('Test Suite runs setup', function(){
  assert( 'There is one item created and selected', fw.selection.length, 1);
});
assert('Test Suite runs teardown', fw.selection.length,0);


// API
test('Array extensions are defined', function(){
  assert( 'Array.clone is defined', typeof(fw.selection.clone), "function" );
  assert( 'Array.each is defined', typeof(a.each), "function" );
  assert( 'Array.each_with_index is defined', typeof(a.each_with_index), "function" );
  assert( 'Array.is_group is defined', typeof(a.is_group), "function" );
  assert( 'Number.times is defined', typeof((5).times), "function" );
  assert( 'Array.each_in_group is defined', typeof(fw.selection[0].each_in_group), 'function');
});
test('Array extensions work', function(){
  count = 0;
  a.each(function(p){
    count++;
  });
  assert( 'Array.each works', count, a.length );
  count = 0;
  a.each_with_index(function(p,index){
    count += index;
  });
  assert( 'Array.each_with_index works', count, 9+8+7+6+5+4+3+2+1 );
  b = a.clone();
  assert('Array.clone works',b[4],4);
});


// Align
test( 'Align commands: Center', function(){

  fw.getDocumentDOM().selectAll();
  fw.selection[0].left = 100 * Math.random();
  fw.selection[0].top = 100 * Math.random();
  run_command('Align', 'Center on Canvas - Horizontal');
  assert('Object is centered horizontally', fw.selection[0].left, 150);

  fw.getDocumentDOM().selectAll();
  fw.selection[0].left = 100 * Math.random();
  fw.selection[0].top = 100 * Math.random();
  run_command('Align', 'Center on Canvas - Vertical');
  assert('Object is centered vertically', fw.selection[0].top, 150);

  fw.getDocumentDOM().selectAll();
  fw.selection[0].left = 100 * Math.random();
  fw.selection[0].top = 100 * Math.random();
  run_command('Align', 'Center on Canvas - Both');
  assert('Object is centered horizontally', fw.selection[0].left, 150);
  assert('Object is centered vertically', fw.selection[0].top, 150);

});

test( 'Align commands: Space', function(){
  (3).times(add_rectangle);
  prompt_return = 10;
  fw.getDocumentDOM().selectAll();
  run_command('Align','Space Horizontal');
  assert('Elements are spaced horizontally',Selection.width(),430);
  fw.getDocumentDOM().selectAll();
  run_command('Align','Space Vertical');
  assert('Elements are spaced vertically',Selection.height(),430);
});


// Alpha
test( 'Alpha commands', function(){
  [10,20,30,40,50,60,70,80,90,100].each(function(alpha){
    run_command("Alpha","Alpha "+alpha);
    // This is a *very* bad test, but that's just because Fireworks does some funky stuff with opacity...
    assert( 'Alpha ' + alpha + ' works', Math.round(fw.selection[0].opacity),alpha);
  });
});


// Canvas
test( 'Canvas', function(){
  prompt_return = 110;
  run_command("Canvas","Canvas Width");
  assert('Canvas Width is 110', dom().width, 110);
  run_command("Canvas","Canvas Height");
  assert('Canvas Height is 110', dom().height, 110);
  prompt_return = '100,100';
  run_command("Canvas","Canvas Size");
  assert('Canvas Size sets Width', dom().width, 100);
  assert('Canvas Size sets Height', dom().height, 100);
});


// Color
test('Color',function(){
  prompt_return = '#00ff00';
  run_command('Color','Canvas Color');
  assert('Canvas Color sets color', dom().backgroundColor,'#00ff00');
  run_command('Color','Fill Color');
  assert('Fill Color sets Color', fw.selection[0].pathAttributes.fillColor,'#00ff00');
  run_command('Color','Stroke Color');
  assert('Fill Color sets Stroke', fw.selection[0].pathAttributes.brushColor,'#00ff00');
});


// Effects
test('Effects',function(){
  run_command('Effects','Plastic');
});

// Export
test('Export',function(){
  //
});

// Export Settings

// Grids

// Guides

// Pages


// Position
test('Position',function(){
  prompt_return = '100,100';
  run_command('Position','Set Position');
  assert('Element is moved to x position', fw.selection[0].left, 100);
  assert('Element is moved to y position', fw.selection[0].top, 100);
});

// Properties

// Select
test( 'Select text objects', function(){});


// Size
test( 'Size command, single object', function(){
  assert('An item is selected and its width is 100', fw.selection[0].width, 100);
  // error -2147216361
  run_command("Size","Width +10");
  assert('Selected item is 10 pixels wider', fw.selection[0].width, 110);
  run_command("Size","Height +10");
  assert('Selected item is 10 pixels taller', fw.selection[0].height, 110);
});

test( 'Size command, multiple objects', function(){
  assert('One item is selected', fw.selection.length,1);
  (30).times(add_rectangle);
  fw.getDocumentDOM().selectAll();
  assert('Multiple items are selected', fw.selection.length, 31);
  run_command("Size","Width +10");
  assert('Multiple items are 10 pixels wider', Selection.get_bounds().right,110);
  run_command("Size","Height +10");
  assert('Multiple items are 10 pixels taller', Selection.get_bounds().bottom,110);
});

test( 'Size command, groups', function(){
  (30).times(add_rectangle);
  fw.getDocumentDOM().selectAll();
  fw.getDocumentDOM().group("normal");
  run_command('Size','Width +10');
  assert('Group is resized',Selection.get_bounds().right,110);
});

// Close test document
fw.closeDocument(test_document,false);

// End test
log('\n' + asserts + ' asserts, ' + ok + ' ok, ' + fail + ' failed. Test run in ' + (new Date() - start_time) + ' ms.');

File.create(test_output,'file:///P128/Users/ale/Desktop/test_output_' + fw.appName.replace(' ','_') + '.txt');
