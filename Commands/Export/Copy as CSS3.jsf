/**DOC**
This command does its best and try to copy the currently selected object's attributes as CSS3 styles.
**DOC**/

/*
  TODO:
  - multicolor gradients
  - alpha in gradients
  - non-vertical gradients
    - attr.fillHandle1, 2 and 3
  - support things other than Rectangles and Paths:
    - Group (Autoshapes are Groups...?)
    - Text
    - Instance (Symbols) (does it make sense?)
  - HSLA
  - ems instead of pixels?
*/

try {
  fw.runScript(fw.appJsCommandsDir + "/bs.js");
} catch(e){
  alert("This command requires the bs.js library\rGet it at http://github.com/bomberstudios/fireworks/");
};

if (fw.selection.length == 0 || fw.selection.length > 1) {
  alert('You need to select ONE object');
} else {
  var sel = fw.selection[0];

  var attr = sel.pathAttributes;
  //dump(attr.fillHandle1); // gradient start
  //dump(attr.fillHandle2); // gradient end
  //dump(attr.fillHandle3); // gradient size?
  var name = sel.name || 'item';

  // fill
  var fill = attr.fill;
  var gradient = {};
  if (fill) {
    var background_color;
    if (fill.gradient) {
      gradient = {
        colors: fill.gradient.nodes,
        alphas: fill.gradient.opacityNodes
      };
      background_color = gradient.colors[0].color;
      var top_color = background_color;
      var bottom_color = gradient.colors[gradient.colors.length-1].color;
    } else {
      background_color = attr.fillColor;
    }
  } else {
    gradient = undefined;
    background_color = 'transparent';
  }

  // border
  var brush = attr.brush;
  var border;
  if (brush) {
    border = {
      size: brush.diameter,
      color: Color.hex_to_rgba(attr.brushColor)
    };
  } else {
    border = undefined;
  }

  // opacity
  var opacity = sel.opacity / 100;

  // border-radius
  if (sel.roundness) {
    var border_radius = (sel.roundness * sel.height) / 2;
  };

  // Shadows
  var shadows;
  if (sel.effectList) {
    var fxs = [].concat(sel.effectList.effects);
    var radians=Math.PI/180;
    fxs.each(function(fx){
      if (fx.category == "Shadow and Glow") {
        shadows.push({
          type: (fx.name == "Inner Shadow") ? 'inset' : '',
          color: Color.hex_to_rgba(fx.ShadowColor),
          blur: fx.ShadowBlur,
          x: Math.abs(Math.cos(fx.ShadowAngle * radians)) < 0.00000001 ? 0 : fx.ShadowDistance * Math.cos(fx.ShadowAngle*(radians)),
          y: -fx.ShadowDistance * Math.sin(fx.ShadowAngle*(radians))
        });
      };
    });
  } else {
    shadows = [];
  }


  // size
  var w = sel.width;
  var h = sel.height;
  if (border) {
    w -= (border.size-1)*2;
    h -= (border.size-1)*2;
  }

  // color & gradient
  // border size & color
  // border-radius
  // see if it is a circle, then use border-radius: 9999px;
  // shadows (inner, outer...)
  // transforms (rotation...)

  var css = "." + name + " {\n";
  css += "  margin: 0; padding: 0;\n";
  css += "  width: " + w + "px;\n";
  css += "  height: " + h + "px;\n";
  if (opacity < 1) {
    css += "  opacity: "+opacity+";\n";
  };
  if (border) {
    css += "  border: " + border.size + "px solid " + border.color + ";\n";
  };
  if (border_radius > 0) {
    css += "  -webkit-border-radius: " + border_radius + "px;\n";
    css += "  -moz-border-radius: " + border_radius + "px;\n";
    css += "  border-radius: " + border_radius + "px;\n";
  };
  if (shadows.length > 0) {
    var tmp_shadows = [];
    shadows.each(function(shadow){
      tmp_shadows.push(shadow.type + " " + shadow.color + " " + shadow.x + "px "+shadow.y+"px "+shadow.blur+"px");
    });
    css += "  -webkit-box-shadow: " + tmp_shadows.join(',') + ";\n";
    css += "  -moz-box-shadow: " + tmp_shadows.join(',') + ";\n";
  };
  css += "  background: "+background_color+";\n"; // old browsers
  if (gradient.colors) {
    css += "  background-image: -moz-linear-gradient(top, "+top_color+" 0%, "+bottom_color+" 100%);\n";
    css += "  background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%,"+top_color+"), color-stop(100%,"+bottom_color+"));\n";
    css += "  filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='"+top_color+"', endColorstr='"+bottom_color+"',GradientType=0 );\n";
  };
  css += "}\n";

  fw.getDocumentDOM().clipCopyJsToExecute(css);
}